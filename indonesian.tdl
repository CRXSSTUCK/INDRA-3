;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Indonesian
;;; created at:
;;;     Tue Apr 01 14:23:30 UTC 2014
;;; based on Matrix customization system version of:
;;;     Sat Feb 22 09:32:37 UTC 2014
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

quant_rel := predsort.
def_q_rel := quant_rel.
the_q_rel := def_q_rel.
exist_q_rel := quant_rel.
poss_rel := quant_rel.
pronoun_q_rel := quant_rel.
pron_rel := predsort.

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

head :+ [ AUX bool,
	  HON luk,
    FORM form ].

topic-comment :+ [ SYNSEM.L-PERIPH +, NON-HEAD-DTR.SYNSEM.L-PERIPH + ].

png :+ [ PERNUM pernum ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Pernum

pernum := *top*.
pl := pernum.
1st := pernum.
2nd := pernum.
3rd := pernum.
1pl := 1st & pl.
1pl_incl := 1pl.
1pl_excl := 1pl.
2pl := 2nd & pl.
3pl := 3rd & pl.
sg := pernum.
indet := pernum.
1sg := 1st & sg.
2sg := 2nd & sg.
3sg := 3rd & sg.
1indet := 1st & indet.
2indet := 2nd & indet.
3indet := 3rd & indet.


;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;; Aspect

perf := aspect.
prog := aspect.
fut := aspect.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr > ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-initial &
  [ NON-HEAD-DTR.SYNSEM.OPT - ].

common-noun-lex := noun-lex.

hon-lex := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.HON + ].

basic-pronoun-lex :=  basic-one-arg & 
  [ SYNSEM [ LOCAL [ CAT [ HEAD noun,
               VAL [ COMPS < >,
                 SUBJ < >,
                 SPR < > ] ],
             CONT [ RELS.LIST.FIRST #rel ] ],
         LKEYS.KEYREL noun-relation & #rel & [ PRED "pronoun_n_rel" ] ] ].

pronoun-lex := basic-pronoun-lex & no-hcons-lex-item & 
               norm-hook-lex-item & basic-icons-lex-item &
  [ SYNSEM.LOCAL.CONT.RELS <! relation !> ].

1sg-pronoun-lex := pronoun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1sg ].

2sg-pronoun-lex := pronoun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2sg ].

2sg-pronoun-hon-lex := 2sg-pronoun-lex & hon-lex.

3sg-pronoun-lex := pronoun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3sg ].

1pl-pronoun-incl-lex := pronoun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1pl & 1pl_incl ].
 
1pl-pronoun-excl-lex := pronoun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1pl & 1pl_excl ].

2pl-pronoun-lex := pronoun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2pl ].

3pl-pronoun-lex := pronoun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3pl ].

demonstrative-noun-lex := no-spr-noun-lex.

;;; Verbs

verb-lex := non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD verb ].

main-verb-lex := verb-lex & basic-verb-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.AUX + ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

intr-verb-lex := intransitive-verb-lex.

tr-verb-lex := transitive-verb-lex.

opt-tr-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.OPT + ].

no-obj-drop-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.OPT - ].

obj-drop-verb-lex := transitive-verb-lex.

;;; Auxiliaries

subj-raise-aux := aux-lex & trans-first-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             COMPS < #comps >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun,
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LOCAL.CAT [ VAL [ SUBJ < [ ] >,
                                 COMPS < >,
                                 SPR < >,
                                 SPEC < > ],
                           HEAD verb ] ] > ].

subj-raise-aux-with-pred := subj-raise-aux & norm-sem-lex-item & trans-first-arg-raising-lex-item-1.

subj-raise-aux-no-pred := subj-raise-aux & raise-sem-lex-item & no-icons-lex-item & 
  [ ARG-ST < [ ], [ LOCAL.CAT.HEAD.AUX - ] > ].

aspect_perf-aux-lex := subj-raise-aux-no-pred & 
  [ SYNSEM.LOCAL.CAT [ HEAD.FORM finite,
		       VAL.COMPS.FIRST.LOCAL [ CONT.HOOK.INDEX.E.ASPECT perf,
					       CAT.HEAD.FORM form ] ] ].

aspect_prog-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL.CAT [ HEAD.FORM finite,
		       VAL.COMPS.FIRST.LOCAL [ CONT.HOOK.INDEX.E.ASPECT prog,
					       CAT.HEAD.FORM form ] ] ].

aspect_fut-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL.CAT [ HEAD.FORM finite,
		       VAL.COMPS.FIRST.LOCAL [ CONT.HOOK.INDEX.E.ASPECT fut,
					       CAT.HEAD.FORM form ] ] ].


neg-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM form ].

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & basic-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

determinative-determiner-lex := determiner-lex & no-icons-lex-item.

; We treat question particles as complementizers.
; Here is the lexical type for complementizers.

;complementizer-lex-item := raise-sem-lex-item & basic-one-arg &
;  [ SYNSEM.LOCAL.CAT [ HEAD comp &
;                            [ MOD < > ],
;                       VAL [ SPR < >,
;                             SUBJ < >,
;                             COMPS < #comp > ] ],
;    ARG-ST < #comp &
;             [ LOCAL.CAT [ MC +,
;                           HEAD verb,
;                           VAL [ SUBJ < >,
;                                 COMPS < > ] ] ] > ].

; Subtype for question particles. Constrains SF to ques.

;qpart-lex-item := complementizer-lex-item &
;  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.SF ques,
;                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Lexical rule types

n-enclitic-lex-rule-super := same-non-local-lex-rule &
			     same-modified-lex-rule &
			     same-light-lex-rule &
			     same-ctxt-lex-rule &
			     same-cont-lex-rule &
			     same-agr-lex-rule &
			     same-head-lex-rule &
			     same-hc-light-lex-rule &
			     same-posthead-lex-rule &
			     same-mc-lex-rule &
			     infl-lex-rule & 
			     no-icons-rule &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR <>,
			   SUBJ <>,
			   COMPS <>,
			   SPEC <> ],
    DTR common-noun-lex ].

nya-lex-rule := n-enclitic-lex-rule-super.

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

basic-head-1st-comp-phrase :+ [ SYNSEM.L-PERIPH - ].

head-comp-phrase := basic-head-1st-comp-phrase & head-initial &
  [ SYNSEM.LOCAL.CAT.HC-LIGHT - ].

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ SYNSEM [ LOCAL.CAT.MC +,
             NON-LOCAL.SLASH 0-dlist ],
    HEAD-DTR.SYNSEM [ L-PERIPH -,
                      LOCAL.CAT.VAL.COMPS < > ] ].

subj-head-nmc-phrase := basic-head-subj-nmc-phrase & head-final &
  [ SYNSEM.LOCAL.CAT.MC -,
    HEAD-DTR.SYNSEM.NON-LOCAL.SLASH.LIST < [ CONT.HOOK.ICONS-KEY focus-or-topic ] > ].

infostr-dislocated-phrase := no-rels-hcons-rule & narrow-focus &
  [ SYNSEM.LOCAL.CAT [ MC +,
                       VAL.SUBJ < > ],
    C-CONT.ICONS <! info-str & #icons &
                    [ TARGET #index,
                      CLAUSE #clause ] !>,
    HEAD-DTR.SYNSEM.LOCAL [ CAT [ MC -,
                                  HEAD verb ],
                            CONT.HOOK [ INDEX #clause,
                                        CLAUSE-KEY #clause ] ],
    NON-HEAD-DTR.SYNSEM [ LIGHT -,
                          LOCAL [ CAT.HEAD +np,
                                  CONT.HOOK [ INDEX #index,
                                              ICONS-KEY #icons ] ] ] ].

infostr-filler-head-phrase := basic-head-filler-phrase & infostr-dislocated-phrase & head-final &
  [ SYNSEM.L-PERIPH +,
    HEAD-DTR.SYNSEM [ L-PERIPH -,
                      LOCAL.CAT.VAL.SUBJ < > ],
    NON-HEAD-DTR.SYNSEM.LOCAL.CONT.HOOK.ICONS-KEY topic ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED exist_q_rel ] !> ].

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination Strategy 1

n1-top-coord-rule := basic-n-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-mid-coord-rule := basic-n-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

np1-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

vp1-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

s1-top-coord-rule := basic-s-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

s1-mid-coord-rule := basic-s-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

s1-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;:begin :instance.
;:include "indonesian_add2".
;:end :instance.

;;; Verbs

clausal-comp-verb-lex := main-verb-lex & clausal-second-arg-trans-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps & 
				 [ LOCAL.CAT [ HEAD +vc & [ FORM finite ],
					       VAL [ SUBJ < >,
						     COMPS < > ]]] >,
    ARG-ST.REST.FIRST #comps ].

prop-comp-verb-lex := clausal-comp-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.SF prop ].


ques-comp-verb-lex := clausal-comp-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CAT.HEAD comp,
					     CONT.HOOK.INDEX.SF ques ]].

locative-verb-lex := verb-lex & trans-first-arg-raising-lex-item-1 &
  [ SYNSEM.LOCAL [ CAT.VAL [ SUBJ < #subj >,
                             COMPS < #comps >,
                             SPR < >,
                             SPEC < > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CONT.HOOK.INDEX #xarg,
                       CAT [ VAL [ SPR < >,
                                   COMPS < > ],
                             HEAD noun ] ] ],
             #comps &
             [ LOCAL.CAT [ VAL [ COMPS < > ],
                           HEAD adp ] ] > ].

;;; Complementizers

complementizer-lex-item := raise-sem-lex-item & basic-one-arg &
  [ SYNSEM.LOCAL.CAT [ HEAD comp,
		       VAL [ SUBJ < >,
			     SPR < >,
			     COMPS < #comps &
				     [ LOCAL.CAT [ HEAD verb,
						   VAL.SUBJ < > ]] > ]],
    ARG-ST < #comps > ].

propcomp-lex-item := complementizer-lex-item &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.SF prop ].

qpart-lex-item := complementizer-lex-item &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.SF ques,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

noun+det-lex-item := norm-hook-lex-item & non-mod-lex-item &
 [ SYNSEM [LOCAL [ CAT [ HEAD noun,
			 VAL [ SPR < >,
			       COMPS < >,
			       SUBJ < >,
			       SPEC < > ]],
		   CONT [RELS <! relation &
			       [LBL #nh,
				ARG0 #s ],
			       quant-relation & #det &
			       [ARG0 #s,
				RSTR #h ]!>,
			 HCONS <! qeq &
				[HARG #h,
				 LARG #nh ]!> ]],
	   LKEYS [ KEYREL relation,
		   ALTKEYREL #det ]]].

n+det-lex := noun+det-lex-item.

;neg+aspect-lex-item := norm-hook-lex-item & subj-aux- &
; [ SYNSEM [LOCAL [ CAT [ HEAD verb,
;			 VAL [ SPR < >,
;			       COMPS < >,
;			       SUBJ < >,
;			       SPEC < > ]],
;		   CONT [RELS <! relation &
;			       [LBL #nh, ************neg
;				ARG0 #s ],
;			       quant-relation & #verb &
;			       [ARG0 #s, ************asp
;				RSTR #h ]!>,
;			 HCONS <! qeq &
;				[HARG #h,
;				 LARG #nh ]!> ]],
;	   LKEYS [ KEYREL relation,
;		   ALTKEYREL #verb ]]].

;n+asp-lex := neg+aspect-lex-item.

;;; Adjectives

adjective-lex := basic-adjective-lex & intersective-mod-lex &
	      norm-ltop-lex-item &
[ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT [ HEAD noun,
                                                    VAL.SPR cons ]]>,
			   VAL [ SPR < >,
				 SUBJ < >,
				 COMPS < >,
				 SPEC < > ],
			   POSTHEAD + ]]]].

;;; Adverbs

adverb-lex := basic-adverb-lex & intersective-mod-lex &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT [ VAL [ SUBJ cons,
							  COMPS < > ],
						    HEAD verb ] ]>,
			   VAL [ SPR < >,
				 SUBJ < >,
				 COMPS < >,
				 SPEC < > ],
			   POSTHEAD - ]]]].

adverb-time-lex := basic-adverb-lex & intersective-mod-lex &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT [ VAL [ COMPS < > ],
						    HEAD verb ] ]>,
			   VAL [ SPR < >,
				 SUBJ < >,
				 COMPS < >,
				 SPEC < > ]]]]].

;;; Adpositions

adposition-lex := basic-adposition-lex & intersective-mod-lex & norm-ltop-lex-item &
  [ SYNSEM [ LKEYS.KEYREL [ ARG0 #arg0,
			    ARG1 #xarg,
			    ARG2 #ind ],
	     LOCAL [ CONT.HOOK [ XARG #xarg,
				 INDEX #arg0 ],
		     CAT [ HEAD.MOD < [ LOCAL [ CAT [ HEAD verb ],
						CONT.HOOK.INDEX #xarg ]] >,
			   VAL [ SPR < >,
			     COMPS < [ OPT -,
				       LOCAL [ CAT [ HEAD noun,
						     VAL.SPR < > ],
					       CONT.HOOK.INDEX #ind ]] >,
				 SUBJ < > ]]]]].

can-aux := basic-verb-lex & trans-first-arg-raising-lex-item-1 & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT [ VAL [ SUBJ < #subj >,
                             COMPS < #comps >,
                             SPR < >,
                             SPEC < > ],
                       HEAD verb &
                            [ AUX + ] ],
    ARG-ST < #subj &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ],
             #comps &
             [ LOCAL.CAT [ VAL [ SUBJ < [  ] >,
                                 COMPS < > ],
                           HEAD verb &
                               [ AUX -] ] ] > ] .

;; DPF 2014-08-01 - Added unary and binary bridging rules to accommodate robust
;; full-forest treebanking.  The strategy is to pump each normal edge in the
;; chart to a "bridge head" edge via the unary rule, and then combine two
;; adjacent such bridge-head edges using the binary rule.  This strategy,
;; proposed by Woodley Packard, results in a mere doubling of the number of
;; edges in each cell of the chart, rather than the square of the number of
;; normal edges that resulted from trying just a binary bridging rule that
;; accepted either bridge or normal edges.
;;
bridge-head := head-min &
  [ BRIDGED luk ].

bridge-binary-phrase := basic-binary-phrase &
  [ SYNSEM [ LOCAL [ CAT [ HEAD bridge-head & [ BRIDGED + ],
			   VAL [ SUBJ < >,
				 SPR < >,
				 COMPS < > ] ] ],
	     NON-LOCAL non-local-none ],
    C-CONT [ HOOK [ LTOP #lbl, INDEX #arg0 ],
	     RELS <! [ LBL #lbl, PRED "bridge_x_rel",
		       ARG0 #arg0, ARG1 #lind, ARG2 #rind ] !>,
	     HCONS <! !> ],
    ARGS < [ SYNSEM.LOCAL [ CAT.HEAD bridge-head & [ BRIDGED - ],
			    CONT.HOOK.INDEX #lind ] ],
	   [ SYNSEM.LOCAL [ CAT.HEAD bridge-head,
			    CONT.HOOK.INDEX #rind ] ] > ].

bridge-unary-phrase := basic-unary-phrase &
  [ SYNSEM [ LOCAL [ CAT [ HEAD bridge-head,
			   VAL [ SUBJ < >,
				 SPR < >,
				 COMPS < > ] ] ],
	     NON-LOCAL non-local-none ],
    C-CONT [ HOOK #hook,
	     RELS <! !>,
	     HCONS <! !> ],
    ARGS < [ SYNSEM.LOCAL [ CAT.HEAD head,
			    CONT.HOOK #hook ] ] > ].
