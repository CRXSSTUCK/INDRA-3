;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Indonesian
;;; created at:
;;;     Wed Apr 22 13:14:22 UTC 2015
;;; based on Matrix customization system version of:
;;;     Fri Feb  6 23:12:14 UTC 2015
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; SSH 2014-10-24: for chart mapping
;; MATRIX REDEFINITION
;; make STEM of type orthog(raphy) to pass up from/to/form
sign-min := avm &
  [ STEM orthog ].

orthog := cons &
  [ FROM string,
    TO string ].

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;; DVM 2015-08-18: added mrs
hook :+ 
 [ SPEAKER-KEY ref-ind,
   HEARER-KEY ref-ind ].

quant_rel := predsort.
pron_rel := predsort.
def_q_rel := quant_rel.
the_q_rel := def_q_rel.
exist_q_rel := quant_rel.
poss_rel := quant_rel.
pronoun_q_rel := quant_rel.

;; DVM 2015-05-09: added decomposed words
demon_q_rel := quant_rel.
proximal_q_rel := demon_q_rel.
dist_q_rel := demon_q_rel.
medial_q_rel := dist_q_rel.
remote_q_rel  := dist_q_rel.

generic_n_rel := predsort.
entity_n_rel := generic_n_rel.
person_n_rel := entity_n_rel.
benda_n_rel := entity_n_rel.
hal_n_rel := entity_n_rel.
time_n_rel  := generic_n_rel.
; where
place_n_rel  := generic_n_rel.
; why
reason_n_rel := generic_n_rel.
; how
manner_n_rel := generic_n_rel.

;; DVM 2015-08-18: added from zhong.tdl
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SSH 2015-05-24
;; CTXT (Honorification)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

dialogue := icons.
addressor := dialogue.
addressee := dialogue.
rank := icons.
higher-or-equal := rank.
lower-or-equal := rank.
higher := higher-or-equal.
lower := lower-or-equal.
equal :=  higher-or-equal & lower-or-equal.

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

head :+ [ HONORIFIC luk,
    AUX bool,
    FORM form ].

; This grammar includes head-modifier rules.  To keep
; out extraneous parses, constrain the value of MOD on
; various subtypes of head.  This may need to be loosened later.
; This constraint says that only adverbs, adjectives,
; and adpositions can be modifiers.

topic-comment :+ [ SYNSEM.L-PERIPH +, NON-HEAD-DTR.SYNSEM.L-PERIPH + ].

+nvcdmo :+ [ MOD < > ].

inflected :+ [ VOICE-FLAG luk ].

infl-satisfied :+ [ VOICE-FLAG na-or-+ ].

png :+ [ PERNUM pernum,
    ANIMACY animacy ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Pernum

pernum := *top*.
sg := pernum.
pl := pernum.
1st := pernum.
2nd := pernum.
3rd := pernum.
1sg := 1st & sg.
2sg := 2nd & sg.
3sg := 3rd & sg.
1pl := 1st & pl.
1pl_incl := 1pl.
1pl_excl := 1pl.
2pl := 2nd & pl.
3pl := 3rd & pl.
indet := pernum.
1indet := 1st & indet.
2indet := 2nd & indet.
3indet := 3rd & indet.

;;; Animacy

animacy := *top*.
animate := animacy.
inanimate := animacy.
human := animate.
non-human := animate.

;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;; Tense

future := tense.

;;; Aspect

perf := aspect.
prog := aspect.
perf-and-prog := perf & prog.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr > ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-initial &
  [ NON-HEAD-DTR.SYNSEM.OPT - ].

common-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd ].

proper-name-lex := basic-one-arg & basic-icons-lex-item &
  [ SYNSEM [ LOCAL [ CAT [ HEAD noun,
			   VAL [ COMPS < >,
				 SUBJ < >,
				 SPR < > ] ],
		     CONT [ HOOK.INDEX #index,
			    RELS <! relation & #keyrel & 
				  [ LBL #larg,
				    ARG0 #index ],
				  quant-relation &
				  [ PRED "proper_q_rel",
				    ARG0 #index,
				    RSTR #harg ] !>,
			    HCONS <! qeq & 
				   [ HARG #harg,
				     LARG #larg ] !> ] ],
	     NON-LOCAL.SLASH 0-dlist,
	     LKEYS.KEYREL #keyrel & named-relation ] ].

;hon-lex := lex-item &
;  [ SYNSEM.LOCAL.CAT.HEAD.HON + ].

basic-pronoun-lex :=  basic-one-arg & norm-hook-lex-item &
  [ SYNSEM [ LOCAL [ CAT [ HEAD noun & [ MOD <> ],
                           VAL [ COMPS < >,
                                 SUBJ < >,
                                 SPR < > ] ],
                     CONT [ RELS.LIST.FIRST #rel ] ],
             LKEYS.KEYREL noun-relation & #rel & [ PRED "pronoun_n_rel" ] ] ].

pronoun-lex := basic-pronoun-lex & no-hcons-lex-item & 
               norm-hook-lex-item & basic-icons-lex-item &
  [ SYNSEM.LOCAL.CONT.RELS <! relation !> ].

;; DVM 2015-08-18: added from zhong-lextypes.tdl
;; from here
personal-pronoun-lex := basic-pronoun-lex &
  [ SYNSEM.LOCAL.CONT [ RELS <! relation & [ARG0 #x, LBL #h], 
			    [ PRED pronoun_q_rel,
				ARG0 #x, RSTR #h2 ] !> ,
                        HCONS <! qeq & [ LARG #h, HARG #h2 ] !>  ] ].

speaker-lex-item := basic-icons-lex-item &
  [ SYNSEM.LOCAL.CONT.HOOK [ INDEX #index,
			     SPEAKER-KEY #index ] ].

non-honorific-hearer-lex-item := basic-icons-lex-item & 
  [ SYNSEM.LOCAL.CONT.HOOK [ INDEX #index,
			     HEARER-KEY #index ] ].

honorific-hearer-lex-item := lex-item & 
  [ SYNSEM.LOCAL.CONT [ HOOK [ INDEX #index,
			       SPEAKER-KEY #skey,
			       HEARER-KEY #index ],
			ICONS <! higher & [ IARG1 #skey,
					    IARG2 #index ] !> ] ].
;; until here

;pronoun-noun-lex := noun-lex.

inanimate-noun-noun-lex := common-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.ANIMACY inanimate ].

inanimate-plural-noun-lex := inanimate-noun-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM pl ].

animate-noun-noun-lex := common-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.ANIMACY animate ].

nonhuman-noun-noun-lex := animate-noun-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.ANIMACY non-human ].

nonhuman-plural-noun-lex := nonhuman-noun-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM pl ].

human-noun-noun-lex := animate-noun-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.ANIMACY human ].

human-plural-noun-lex := human-noun-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM pl ].

;proper-noun-lex := noun-lex &
;  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd ].

;; DVM 2015-05-09: pronoun-noun-lex is changed to pronoun-lex
;; DVM 2015-05-09: pronouns cannot be modified by adjectives
;; DVM 2015-08-18: made some modifications, based on zhong-letypes.tdl

;pronoun-1st-sg-nohon-noun-lex := pronoun-lex &
;  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG.PERNUM 1sg,
;                   CAT.HEAD.HONORIFIC - ] ].

pronoun-1st-sg-nohon-noun-lex := personal-pronoun-lex & speaker-lex-item & 
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1sg ].

;pronoun-1st-sg-hon-noun-lex := pronoun-lex &
;  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG.PERNUM 1sg,
;                   CAT.HEAD.HONORIFIC + ] ].

pronoun-1st-sg-hon-noun-lex := personal-pronoun-lex & speaker-lex-item & 
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1sg ].

;pronoun-1st-pl-incl-noun-lex := pronoun-lex &
;  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1pl_incl ].

pronoun-1st-pl-incl-noun-lex := personal-pronoun-lex & basic-icons-lex-item &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1pl_incl ].

;pronoun-1st-pl-excl-noun-lex := pronoun-lex &
;  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1pl_excl ].

pronoun-1st-pl-excl-noun-lex :=  personal-pronoun-lex & basic-icons-lex-item &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1pl_excl ].

;pronoun-2nd-sg-nohon-noun-lex := pronoun-lex &
;  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG.PERNUM 2sg,
;                   CAT.HEAD.HONORIFIC - ] ].

pronoun-2nd-sg-nohon-noun-lex := personal-pronoun-lex & non-honorific-hearer-lex-item & 
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2sg ].

;pronoun-2nd-sg-hon-noun-lex := pronoun-lex &
;  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG.PERNUM 2sg,
;                   CAT.HEAD.HONORIFIC + ] ].

pronoun-2nd-sg-hon-noun-lex := personal-pronoun-lex & honorific-hearer-lex-item &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2sg ].

;pronoun-3rd-sg-nohon-noun-lex := pronoun-lex &
;  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG.PERNUM 3sg,
;                   CAT.HEAD.HONORIFIC - ] ].

pronoun-3rd-sg-nohon-noun-lex := personal-pronoun-lex & non-honorific-hearer-lex-item &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3sg ].

;pronoun-3rd-sg-hon-noun-lex := pronoun-lex &
;  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG.PERNUM 3sg,
;                   CAT.HEAD.HONORIFIC + ] ].

pronoun-3rd-sg-hon-noun-lex := personal-pronoun-lex & honorific-hearer-lex-item &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3sg ].

;pronoun-2nd-pl-noun-lex := pronoun-lex &
;  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2pl ].

pronoun-2nd-pl-noun-lex := personal-pronoun-lex & non-honorific-hearer-lex-item & 
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2pl ].

;pronoun-3rd-pl-noun-lex := pronoun-lex &
;  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3pl ].

pronoun-3rd-pl-noun-lex := personal-pronoun-lex & basic-icons-lex-item &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3pl ].

;; DVM 2015-05-09: demonstratives
;; DVM 2015-05-09: pronoun-noun-lex is changed to no-spr-noun-lex
;; demonstratives cannot be modified by adjectives
;; ini tua "old this" is considered not grammatical

demonstrative-pronoun-noun-lex := no-spr-noun-lex.

demonstrative-pronoun-pl-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3pl ].

;;; Verbs

; verb-lex is HC-LIGHT - to allow us to pick out
; 
;   lexical Vs for V-level attachment of negative adverbs.

verb-lex := non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT [ HEAD verb,
                       HC-LIGHT - ] ].

indonesian-verb-lex := verb-lex & 
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ] ].

main-verb-lex := indonesian-verb-lex & basic-verb-lex.

aux-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.AUX + ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

intr-verb-lex := intransitive-verb-lex.

tr-verb-lex := transitive-verb-lex &
  [ INFLECTED.VOICE-FLAG - ].

opt-tr-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.OPT + ].

no-obj-drop-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.OPT - ].

obj-drop-verb-lex := transitive-verb-lex.

;;; Auxiliaries

subj-raise-aux := aux-lex & trans-first-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             COMPS < #comps >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun,
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LOCAL.CAT [ VAL [ SUBJ < [ ] >,
                                 COMPS < >,
                                 SPR < >,
                                 SPEC < > ],
                           HEAD verb ] ] > ].

subj-raise-aux-with-pred := subj-raise-aux & norm-sem-lex-item & trans-first-arg-raising-lex-item-1.

subj-raise-aux-no-pred := subj-raise-aux & raise-sem-lex-item & no-icons-lex-item & 
  [ ARG-ST < [ ], [ LOCAL.CAT.HEAD.AUX - ] > ].

aspect_perf-aux-lex := subj-raise-aux-no-pred & 
  [ SYNSEM.LOCAL.CAT [ HEAD.FORM finite,
		       VAL.COMPS.FIRST.LOCAL [ CONT.HOOK.INDEX.E.ASPECT perf,
					       CAT.HEAD.FORM form ] ] ].

aspect_prog-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL.CAT [ HEAD.FORM finite,
		       VAL.COMPS.FIRST.LOCAL [ CONT.HOOK.INDEX.E.ASPECT prog,
					       CAT.HEAD.FORM form ] ] ].

modal_fut-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL.CAT [ HEAD.FORM finite,
		       VAL.COMPS.FIRST.LOCAL [ CONT.HOOK.INDEX.E.TENSE future,
					       CAT.HEAD.FORM form ] ] ].

;; DVM 2015-05-09: subj-raise-aux-with-pred is commented out
;; DVM 2015-05-09: saya sedang "I am in the process of" is considered ungrammatical

;aspect_perf-aux-lex := subj-raise-aux-with-pred &
;  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.ASPECT perf,
;                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM form ] ].

;aspect_prog-aux-lex := subj-raise-aux-with-pred &
;  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.ASPECT prog,
;                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM form ] ].

modal-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM form ].

;modal-future-aux-lex := subj-raise-aux-with-pred &
;  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE future,
;                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM form ] ].

;;; Adjectives
;; DVM 2015-05-09: got from new grammar matrix in April 2015

adj-lex := basic-int-mod-adj-lex.

;; DVM 2015-08-18: we do not use PRD because it was deleted in matrix.tdl
adj-adj-lex := attr-adj-lex & stative-pred-adj-lex &
  [ SYNSEM.LOCAL.CAT [ POSTHEAD + ] ].

;adj-adj-lex := attr-adj-lex & stative-pred-adj-lex &
;  [ SYNSEM.LOCAL.CAT [ POSTHEAD +,
;                       HEAD.PRD - ] ].

; Basic attributive adjective definition

attr-adj-lex := adj-lex & intersective-mod-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT [ HEAD noun,
                                              VAL.SPR cons ] ] > ].

; Stative predicate adjective definition

stative-pred-adj-lex := adj-lex &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ < [ LOCAL [ CONT.HOOK.INDEX #xarg,
                                            CAT [ VAL [ SPR < >,
                                                        COMPS < > ],
                                                  HEAD noun ] ] ] >,
                   CONT.HOOK.XARG #xarg ] ].

;;; Adjectives
;; DVM 2015-05-09: from the previous version of INDRA

adjective-lex := basic-adjective-lex & intersective-mod-lex & norm-ltop-lex-item & intransitive-lex-item &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT [ HEAD noun,
                                                    VAL.SPR cons ]]>,
			   VAL [ SPR < >,
			         SUBJ < >,
			         COMPS < >,
			         SPEC < > ],
			   POSTHEAD + ]]]].

;;; Numbers
;; DVM 2015-05-09: from Zhong

;num :+ 
; [ CARDINAL bool ].

;card_rel := named_rel.

;card-relation := named-relation & arg1-relation &
;  [ PRED card_rel ].

;num-adj-lex := single-rel-lex-item & basic-icons-lex-item &
;  [ SYNSEM [ LOCAL [ CAT [ VAL [ COMPS < >,
;				 SUBJ < >,
;				 SPR < > ],
;			   HEAD num & [ CARDINAL +,
;					MOD < > ] ],
;		     CONT [ HOOK [ LTOP #lbl, 
;				   INDEX #index ],
;			    RELS <! #rel !>,
;			    HCONS <! !> ] ],
;	     NON-LOCAL.SLASH 0-dlist,
;	     LKEYS.KEYREL card-relation & #rel & [ LBL #lbl,
;						   ARG1 #index ] ] ].

;a_-_num_le := num-adj-lex.

;;; Classifiers
;; DVM 2015-05-09: from Zhong

;classifier := +jd.

;basic-classifier-lex := norm-ltop-lex-item & single-rel-lex-item & 
;                        intersective-mod-lex & no-icons-lex-item &
;  [ SYNSEM [ LOCAL [ CAT [ HEAD classifier & 
;				[ KEYS.KEY #sense,
;				  MOD < [ LOCAL [ CONT.HOOK [ INDEX #index,
;							      LTOP #ltop ],
;						  CAT [ HEAD noun & [ KEYS.KEY #sense ],
;							VAL.SPR < [] > ] ] ] > ], 
;			   VAL [ SPR < [ LOCAL [ CAT [ VAL [ COMPS < >,
;							     SUBJ < > ],
;						       HEAD num & 
;							   [ MOD < > ] ],
;						 CONT.HOOK [ LTOP #ltop,
;							     INDEX #index ]]]>,
;				 SUBJ < >,
;				 COMPS < > ],
;			   POSTHEAD - ],
;		     CONT.HOOK [ INDEX #index & ref-ind,
;				 LTOP #ltop ] ],          
;	     NON-LOCAL.SLASH 0-dlist,
;	     LKEYS.KEYREL [ PRED #sense,
;			    ARG1 #index ] ] ].

;classifier-lex := basic-classifier-lex &
;  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

;c_-_le := classifier-lex.

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & basic-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

determiner-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd ].

determiner-pl-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3pl ].

; Type for negative adverbs.
; 
; This adverb should go through a specialized phrase structure rule
;        included with this grammar.

neg-adv-lex := basic-scopal-adverb-lex &
  [ SYNSEM.LOCAL.CAT [ VAL [ SPR < >,
                             COMPS < >,
                             SUBJ < > ],
                       POSTHEAD -,
                       HEAD.MOD < [ LOCAL.CAT [ HEAD verb,
                                                VAL [ SUBJ cons,
                                                      COMPS null ] ] ] > ] ].

;; DVM 2015-09-18: "belum" is the same as negative adverb "tidak" with perfect aspect "sudah"
n+asp-lex := neg-adv-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT perf ].

;; DVM 2015-05-09: added to negate adverb of manners
;; DVM 2015-05-09: e.g. mereka berjalan tidak cepat (lit. they walk not fast)
neg-adv-adv-lex := basic-scopal-adverb-lex &
  [ SYNSEM.LOCAL.CAT [ VAL [ SPR < >,
                             COMPS < >,
                             SUBJ < > ],
                       POSTHEAD -,
                       HEAD.MOD < [ LOCAL.CAT [ HEAD adv,
                                                POSTHEAD + ] ] > ] ].

; We treat question particles as complementizers.
; Here is the lexical type for complementizers.

complementizer-lex-item := raise-sem-lex-item & basic-one-arg &
  [ SYNSEM.LOCAL.CAT [ HEAD comp &
                            [ MOD < > ],
                       VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comp > ] ],
    ARG-ST < #comp &
             [ LOCAL.CAT [ MC +,
                           HEAD verb,
                           VAL [ SUBJ < >,
                                 COMPS < > ] ] ] > ].

; Subtype for question particles. Constrains SF to ques.

qpart-lex-item := complementizer-lex-item &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.SF ques,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Lexical rule types

n-enclitic-lex-rule-super := same-non-local-lex-rule &
			     same-modified-lex-rule &
			     same-light-lex-rule &
			     same-ctxt-lex-rule &
			     same-cont-lex-rule &
			     same-agr-lex-rule &
			     same-head-lex-rule &
			     same-hc-light-lex-rule &
			     same-posthead-lex-rule &
			     same-mc-lex-rule &
			     infl-lex-rule & 
  [ SYNSEM.LOCAL.CAT.VAL [ SPR <>,
			   SUBJ <>,
			   COMPS <>,
			   SPEC <> ],
    C-CONT.ICONS <! !>,
    DTR common-noun-lex ].

nya-lex-rule := n-enclitic-lex-rule-super.

ku-lex-rule := n-enclitic-lex-rule-super.

mu-lex-rule := n-enclitic-lex-rule-super.

voice-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED.VOICE-FLAG +,
    DTR tr-verb-lex ].

act-lex-rule := voice-lex-rule-super.

pas-lex-rule := voice-lex-rule-super.

;adj-superlative-lex-rule :=

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

;basic-head-1st-comp-phrase :+ [ SYNSEM.L-PERIPH - ].

head-comp-phrase := basic-head-1st-comp-phrase & head-initial.

;head-comp-phrase := basic-head-1st-comp-phrase & head-initial &
;  [ SYNSEM.LOCAL.CAT.HC-LIGHT - ].

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

;;; DVM 2015-05-09: from zhong
;; begin

;head-spec-h-sem-phrase := basic-head-spec-phrase & head-final &
;  [ HEAD-DTR.SYNSEM.LOCAL [ CAT.HEAD noun,
;                            CONT.HOOK #hook ],
;    C-CONT.HOOK #hook ].

;head-spec-hs := head-spec-h-sem-phrase.

;;; DVM 2015-08-11: from compling grammar engineering page
; verb-lex-supertype := main-verb-lex & transitive-lex-item.

copula-verb-lex := indonesian-verb-lex & trans-first-arg-raising-lex-item-2 &
  [ SYNSEM.LOCAL [ CAT.VAL [ SUBJ < #subj >,
                             COMPS < #comps >,
                             SPR < >,
                             SPEC < > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CONT.HOOK.INDEX #xarg,
                       CAT [ VAL [ SPR < >,
                                   COMPS < > ],
                             HEAD noun ] ] ],
             #comps &
             [ LOCAL.CAT [ VAL [ COMPS < > ],
                           HEAD +jp ] ] > ].

cop-verb-lex :=  transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ OPT - ] > ].

v_np_cop_le := cop-verb-lex.

;; end

; SSH 2014-09-26: Only phrases can be the subjects (phr-synsem)
;subj-head-phrase := decl-head-subj-phrase & head-final &
;  [ SYNSEM.LOCAL.CAT.MC #mc,
;    SYNSEM.SPART #spart,
;    HEAD-DTR.SYNSEM.LOCAL.CAT [ MC #mc,
;				VAL [ SPR olist,
;				      COMPS < > ],
;				POSTHEAD + ],
;    HEAD-DTR.SYNSEM.SPART #spart,
;    NON-HEAD-DTR.SYNSEM  [ R-PERIPH na-or--,
;			   INTERJECTED na-or--,
;			   LOCAL [ CAT [ MC +,
;					 NONSUBJ -,
;					 VAL.SPR <> ] ],
;			   NON-LOCAL [ SLASH 0-dlist & [ LIST < > ],
;				       REL 0-dlist ] ] ].

;subj-head-phrase := decl-head-subj-phrase & head-final &
;  [ SYNSEM [ LOCAL.CAT.MC +,
;             NON-LOCAL.SLASH 0-dlist ],
;    HEAD-DTR.SYNSEM [ L-PERIPH -,
;                      LOCAL.CAT.VAL.COMPS < > ] ].

;subj-head-nmc-phrase := basic-head-subj-nmc-phrase & head-final &
;  [ SYNSEM.LOCAL.CAT.MC -,
;    HEAD-DTR.SYNSEM.NON-LOCAL.SLASH.LIST < [ CONT.HOOK.ICONS-KEY focus-or-topic ] > ].

;infostr-dislocated-phrase := narrow-focus &
;  [ SYNSEM.LOCAL.CAT [ MC +,
;                       VAL.SUBJ < > ],
;    C-CONT [ RELS <! !>, HCONS <! !>,
;	     ICONS <! info-str & #icons &
;                    [ IARG2 #index,
;                      IARG1 #clause ] !> ],
;    HEAD-DTR.SYNSEM.LOCAL [ CAT [ MC -,
;                                  HEAD verb ],
;                            CONT.HOOK [ INDEX #clause,
;                                        CLAUSE-KEY #clause ] ],
;    NON-HEAD-DTR.SYNSEM [ LIGHT -,
;                          LOCAL [ CAT.HEAD +np,
;                                  CONT.HOOK [ INDEX #index,
;                                              ICONS-KEY #icons ] ] ] ].

;infostr-filler-head-phrase := basic-head-filler-phrase & infostr-dislocated-phrase & head-final &
;  [ SYNSEM.L-PERIPH +,
;    HEAD-DTR.SYNSEM [ L-PERIPH -,
;                      LOCAL.CAT.VAL.SUBJ < > ],
;    NON-HEAD-DTR.SYNSEM.LOCAL.CONT.HOOK.ICONS-KEY topic ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

;bare-np-phrase := basic-bare-np-phrase &
;  [ C-CONT.RELS <! [ PRED exist_q_rel ] !> ].

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination Strategy 1

n1-top-coord-rule := basic-n-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-mid-coord-rule := basic-n-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

np1-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

vp1-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

s1-top-coord-rule := basic-s-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

s1-mid-coord-rule := basic-s-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

s1-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;:begin :instance.
;:include "indonesian_add2".
;:end :instance.

;;; Verbs

clausal-comp-verb-lex := main-verb-lex & clausal-second-arg-trans-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps & 
				 [ LOCAL.CAT [ HEAD +vc & [ FORM finite ],
					       VAL [ SUBJ < >,
						     COMPS < > ]]] >,
    ARG-ST.REST.FIRST #comps ].

prop-comp-verb-lex := clausal-comp-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.SF prop ].

ques-comp-verb-lex := clausal-comp-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CAT.HEAD comp,
					     CONT.HOOK.INDEX.SF ques ]].

;; DVM 2015-09-21: trans-first-arg-raising-lex-item-1 is changed to trans-first-arg-raising-lex-item-2 
locative-verb-lex := verb-lex & trans-first-arg-raising-lex-item-2 &
  [ SYNSEM.LOCAL [ CAT.VAL [ SUBJ < #subj >,
                             COMPS < #comps >,
                             SPR < >,
                             SPEC < > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun,
                             VAL [ SPR < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LOCAL.CAT [ VAL [ COMPS < > ],
                           HEAD adp ] ] > ].


trans-first-arg-raising-verb := main-verb-lex & trans-first-arg-raising-lex-item & no-hcons-lex-item &
  [ SYNSEM [ LKEYS.KEYREL arg1-relation & [ ARG1 #arg1 ],
		LOCAL [ CAT.VAL [ SPR < >,
                            SPEC < >,
                            COMPS < #comps >,
                            SUBJ < #subj > ],
                  CONT.HOOK.XARG #xarg ] ],
    ARG-ST < #subj &
            [ LOCAL [ CAT [ HEAD noun,
                            VAL [ SUBJ < >,
                                  SPR < >,
                                  SPEC < >,
                                  COMPS < > ] ],
                      CONT.HOOK.INDEX #xarg ] ],
            #comps &
            [ LOCAL [ CONT.HOOK.INDEX #arg1,
			CAT [ HEAD verb &
                                [ AUX - ],
                          VAL [ COMPS < >,
                                SPR < >,
                                SPEC < >,
                                SUBJ < [ ] > ] ] ] ] > ].

trans-first-arg-control-verb := main-verb-lex & trans-first-arg-control-lex-item & 
  [ SYNSEM [ 
		LOCAL [ CAT.VAL [ SPR < >,
                            SPEC < >,
                            COMPS < #comps >,
                            SUBJ < #subj > ] ] ],
    ARG-ST < #subj &
            [ LOCAL [ CAT [ HEAD noun,
                            VAL [ SUBJ < >,
                                  SPR < >,
                                  SPEC < >,
                                  COMPS < > ] ] ] ],
            #comps &
            [ LOCAL [ 
			CAT [ HEAD verb &
                                [ AUX - ],
                          VAL [ COMPS < >,
                                SPR < >,
                                SPEC < >,
                                SUBJ < [ ] > ] ] ] ] > ].


ditrans-first-arg-control-verb := main-verb-lex & basic-three-arg & basic-icons-lex-item &
  [ SYNSEM [ LKEYS.KEYREL [ ARG1 #ind1,
                            ARG2 #ind2,
                            ARG3 #harg ],
	     LOCAL [ CONT [ HOOK.CLAUSE-KEY #clause,
			   HCONS <! qeq & [ HARG #harg,
					    LARG #larg ] !> ],
                     CAT.VAL [ SPR < >,
                            SPEC < >,
                            COMPS < #comp1, #comp2 >,
                            SUBJ < #subj > ] ] ],
    ARG-ST < #subj &
            [ LOCAL [ CONT.HOOK [ INDEX ref-ind & #ind1,
				  ICONS-KEY.IARG1 #clause,
				  CLAUSE-KEY #clause ],
		      CAT [ HEAD noun,
                            VAL [ SUBJ < >,
                                  SPR < >,
                                  SPEC < >,
                                  COMPS < > ] ] ] ],
	    #comp1 & [ LOCAL.CONT.HOOK [ INDEX #ind2,
				  ICONS-KEY.IARG1 #clause,
				  CLAUSE-KEY #clause ] ],
            #comp2 &
            [ LOCAL [ CONT.HOOK [ XARG #ind1,
				  LTOP #larg,
				  ICONS-KEY.IARG1 #clause,
				  CLAUSE-KEY #clause ],
			CAT [ HEAD verb &
                                [ AUX - ],
                          VAL [ COMPS < >,
                                SPR < >,
                                SPEC < >,
                                SUBJ < [ ] > ] ] ] ] > ].

ditrans-second-arg-control-verb := main-verb-lex & ditrans-second-arg-control-lex-item & 
  [ SYNSEM [ 
		LOCAL [ CAT.VAL [ SPR < >,
                            SPEC < >,
                            COMPS < #comp1, #comp2 >,
                            SUBJ < #subj > ] ] ],
    ARG-ST < #subj &
            [ LOCAL [ CAT [ HEAD noun,
                            VAL [ SUBJ < >,
                                  SPR < >,
                                  SPEC < >,
                                  COMPS < > ] ] ] ],
	    #comp1 & [],
            #comp2 &
            [ LOCAL [ 
			CAT [ HEAD verb &
                                [ AUX - ],
                          VAL [ COMPS < >,
                                SPR < >,
                                SPEC < >,
                                SUBJ < [ ] > ] ] ] ] > ].

ditrans-second-arg-raising-verb := main-verb-lex & ditrans-second-arg-raising-lex-item & 
  [ SYNSEM [ 
		LOCAL [ CAT.VAL [ SPR < >,
                            SPEC < >,
                            COMPS < #comp1, #comp2 >,
                            SUBJ < #subj > ] ] ],
    ARG-ST < #subj &
            [ LOCAL [ CAT [ HEAD noun,
                            VAL [ SUBJ < >,
                                  SPR < >,
                                  SPEC < >,
                                  COMPS < > ] ] ] ],
	    #comp1 & [],
            #comp2 &
            [ LOCAL [ 
			CAT [ HEAD verb &
                                [ AUX - ],
                          VAL [ COMPS < >,
                                SPR < >,
                                SPEC < >,
                                SUBJ < [ ] > ] ] ] ] > ].

;; verb types added from ERG
;; need to be modified

; <type val="v_np_ntr_le">
; <description>Cmps NP(obl), no psv             
; <ex>B remains C.
; <nex>
; <todo>
; </type>
v_np_ntr_le := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps & [ OPT - ] >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

; <type val="v_pp*_dir_le">
; <description>Cmps PP(opt,dir)                 
; <ex>B crept into the room.
; <nex>
; <todo>
; </type>
v_pp*_dir_le := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD adp ] ] > ].

; Temporary patch for e.g. 'take' which has an optional ARG3 role, which
; needs to be present so generator won't spuriously fill it.
; <type val="v_np_noarg3_le">
; <description>Cmps NP(obl), only two args      
; <ex>B took the book.
; <nex>
; <todo>
; </type>
v_np_noarg3_le := main-verb-lex & ditransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comp1, #comp2 >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comp1 &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ],
             #comp2 &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

ditransitive-verb-lex := main-verb-lex & ditransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comp1, #comp2 >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comp1 &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ],
             #comp2 &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD adp ] ] > ].

;; takes dir_state_modable_rel oblique complement.
;; put (takes variety of PP complements, so avoid chart dependency filter)
; <type val="v_np-pp_prop_le">
; <description>Cmps NP(obl),PP(obl), state rslt 
; <ex>B put C on D.
; <nex>
; <todo>
; </type>
v_np-pp_prop_le := ditransitive-verb-lex.

; <type val="v_np-pp_e_le">
; <description>Cmps NP(obl),PP(sel.obl)         
; <ex>B compared C with D.
; <nex>
; <todo>
; </type>
v_np-pp_e_le := ditransitive-verb-lex & 
  [ SYNSEM [ LOCAL.CAT [ VAL.COMPS < [ OPT - ], [ OPT - ] > ] ] ].

; <type val="v_cp_prop_le">
; <description>Cmps S (fin/inf, -Q, opt cmplzr) 
; <ex>B hoped (that) C won. 
; <nex>
; <todo>
; </type>
v_cp_prop_le := prop-comp-verb-lex.

; verb with preposition
v_pp_le := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT [ VAL.COMPS < [ OPT - ] > ] ].

;;; Complementizers

;complementizer-lex-item := raise-sem-lex-item & basic-one-arg &
;  [ SYNSEM.LOCAL.CAT [ HEAD comp,
;		       VAL [ SUBJ < >,
;			     SPR < >,
;			     COMPS < #comps &
;				     [ LOCAL.CAT [ HEAD verb,
;						   VAL.SUBJ < > ]] > ]],
;    ARG-ST < #comps > ].

propcomp-lex-item := complementizer-lex-item &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.SF prop ].

;qpart-lex-item := complementizer-lex-item &
;  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.SF ques,
;                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

noun+det-lex-item := norm-hook-lex-item & non-mod-lex-item &
 [ SYNSEM [LOCAL [ CAT [ HEAD noun,
			 VAL [ SPR < >,
			       COMPS < >,
			       SUBJ < >,
			       SPEC < > ]],
		   CONT [RELS <! relation &
			       [LBL #nh,
				ARG0 #s ],
			       quant-relation & #det &
			       [ARG0 #s,
				RSTR #h ]!>,
			 HCONS <! qeq &
				[HARG #h,
				 LARG #nh ]!> ]],
	   LKEYS [ KEYREL relation,
		   ALTKEYREL #det ]]].

n+det-lex := noun+det-lex-item.

;; DVM 2015-09-21: added "kini", decomposable to "pada saat ini" (at this time)
adp+noun+det-lex-item := norm-hook-lex-item & non-mod-lex-item &
 [ SYNSEM [LOCAL [ CAT [ HEAD adp,
			 VAL [ SPR < >,
			       COMPS < >,
			       SUBJ < >,
			       SPEC < > ]],
		   CONT [RELS <! relation &
			       [ARG2 #s ],
			       quant-relation & #noun &
			       [LBL #nh,
				ARG0 #s ],
			       quant-relation & #det &
			       [ARG0 #s,
				RSTR #h ]!>,
			 HCONS <! qeq &
				[HARG #h,
				 LARG #nh ]!> ]],
	   LKEYS [ KEYREL relation,
		   ALTKEYREL #noun,
		   ALTKEYREL #det ]]].

adp+n+det-lex := adp+noun+det-lex-item.

;;; Adverbs
;; DVM 2015-05-09: basic-int-adverb-lex is changed to basic-scopal-adverb-lex because of updates in matrix.tdl

adverb-lex := basic-scopal-adverb-lex &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT [ VAL [ SUBJ < [ ], ... >,
							  COMPS < > ],
						    HEAD verb ] ]>,
			   VAL [ SPR < >,
				 SUBJ < >,
				 COMPS < >,
				 SPEC < > ] ]]]].

adverb-post-lex := adverb-lex &
  [ SYNSEM.LOCAL.CAT.POSTHEAD + ].

adverb-pre-lex := adverb-lex &
  [ SYNSEM.LOCAL.CAT.POSTHEAD - ].

adverb-time-lex := basic-scopal-adverb-lex &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT [ VAL [ COMPS < > ],
						    HEAD verb ] ]>,
			   VAL [ SPR < >,
				 SUBJ < >,
				 COMPS < >,
				 SPEC < > ] ]]]].

;;; Adpositions

adposition-lex := basic-adposition-lex & intersective-mod-lex & norm-ltop-lex-item &
  [ SYNSEM [ LKEYS.KEYREL [ ARG0 #arg0,
			    ARG1 #xarg,
			    ARG2 #ind ],
	     LOCAL [ CONT.HOOK [ XARG #xarg,
				 INDEX #arg0 ],
		     CAT [ HEAD.MOD < [ LOCAL [ CAT [ HEAD verb,
						      VAL.SUBJ cons ],
						CONT.HOOK.INDEX #xarg ]] >,
			   VAL [ SPR < >,
			     COMPS < [ OPT -,
				       LOCAL [ CAT [ HEAD noun,
						     VAL.SPR < > ],
					       CONT.HOOK.INDEX #ind ]] >,
				 SUBJ < > ]]]]].

can-aux := basic-verb-lex & trans-first-arg-raising-lex-item-1 & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT [ VAL [ SUBJ < #subj >,
                             COMPS < #comps >,
                             SPR < >,
                             SPEC < > ],
                       HEAD verb &
                            [ AUX + ] ],
    ARG-ST < #subj &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ],
             #comps &
             [ LOCAL.CAT [ VAL [ SUBJ < [  ] >,
                                 COMPS < > ],
                           HEAD verb &
                               [ AUX -] ] ] > ] .

;; DPF 2014-08-01 - Added unary and binary bridging rules to accommodate robust
;; full-forest treebanking.  The strategy is to pump each normal edge in the
;; chart to a "bridge head" edge via the unary rule, and then combine two
;; adjacent such bridge-head edges using the binary rule.  This strategy,
;; proposed by Woodley Packard, results in a mere doubling of the number of
;; edges in each cell of the chart, rather than the square of the number of
;; normal edges that resulted from trying just a binary bridging rule that
;; accepted either bridge or normal edges.
;;
bridge-head := head-min &
  [ BRIDGED luk ].

bridge-binary-phrase := basic-binary-phrase &
  [ SYNSEM [ LOCAL [ CAT [ HEAD bridge-head & [ BRIDGED + ],
			   VAL [ SUBJ < >,
				 SPR < >,
				 COMPS < > ] ] ],
	     NON-LOCAL non-local-none ],
    C-CONT [ HOOK [ LTOP #lbl, INDEX #arg0 ],
	     RELS <! [ LBL #lbl, PRED "bridge_x_rel",
		       ARG0 #arg0, ARG1 #lind, ARG2 #rind ] !>,
	     HCONS <! !> ],
    ARGS < [ SYNSEM.LOCAL [ CAT.HEAD bridge-head & [ BRIDGED - ],
			    CONT.HOOK.INDEX #lind ] ],
	   [ SYNSEM.LOCAL [ CAT.HEAD bridge-head,
			    CONT.HOOK.INDEX #rind ] ] > ].

bridge-unary-phrase := basic-unary-phrase &
  [ SYNSEM [ LOCAL [ CAT [ HEAD bridge-head,
			   VAL [ SUBJ < >,
				 SPR < >,
				 COMPS < > ] ] ],
	     NON-LOCAL non-local-none ],
    C-CONT [ HOOK #hook,
	     RELS <! !>,
	     HCONS <! !> ],
    ARGS < [ SYNSEM.LOCAL [ CAT.HEAD head,
			    CONT.HOOK #hook ] ] > ].
